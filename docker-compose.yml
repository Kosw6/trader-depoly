services:
  db:
    image: timescale/timescaledb:latest-pg17
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/20_restore.sh:/docker-entrypoint-initdb.d/20_restore.sh:ro
      - ./docker/trader.dump:/docker-entrypoint-initdb.d/trader.dump:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [appnet]

  app:
    image: ${APP_IMAGE} # ← Hub 경로 사용 (build 없음!)
    container_name: app
    environment:
      TZ: ${TZ}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${APP_PORT}:8080"
    networks: [appnet]

  # ---- Prometheus ----
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    volumes:
      - ./../trader-monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - app
      - db
    networks: [appnet]

  # ---- Grafana ----
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/
    volumes:
      # 당신이 이미 만든 provisioning 파일을 마운트
      - ./../trader-monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks: [appnet]

  # ---- Node Exporter (호스트/컨테이너 기본 메트릭) ----
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: node-exporter
    pid: "host"
    # rootless가 아니면 볼륨 마운트로 호스트 메트릭 범위를 넓힐 수 있음(선택)
    # volumes:
    #   - /proc:/host/proc:ro
    #   - /sys:/host/sys:ro
    #   - /:/rootfs:ro
    command:
      - "--path.rootfs=/"
    networks: [appnet]

  # ---- cAdvisor (컨테이너별 CPU/메모리) ----
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    privileged: true
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks: [appnet]

  # ---- Postgres Exporter (DB 연결/쿼리 메트릭) ----
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - db
    networks: [appnet]

networks:
  appnet:
    driver: bridge

volumes:
  db_data:
  prometheus_data:
  grafana_data:
